###	SPAR <http://www.cpan.org/scripts/>
###	4	644	1148062992	1103934737	is_relevant.pl
$md5 and link 'is_relevant.pl', 'linktest' # This test alas relies heavily on links.
  and (stat 'is_relevant.pl')[1] == (stat 'linktest')[1]
					# Some systems emulate them by copying :-(
  and (fork ? wait>0 : exit(1))		# Make sure we can fork.
###	55	755	1103935704	1185561231	makepp_test_script.pl
# Environment variables STRESS_PREFIX0 .. STRESS_PREFIX<n> without gaps specify
# command prefixes for that many parallel running makepp instances, one each in
# dir0 .. dir<n>.

# The prefixes would typically be "ssh hostname" or "0" for local execution.
# The first two default to "0".

my $insist = $ENV{STRESS_INSIST};	   # Fail unless we had stress.
my $minutes = $ENV{STRESS_MINUTES} || 0.5; # Approximate
my $iters = 100*$minutes;
my $cache = $ENV{STRESS_BUILD_CACHE} || 'build_cache';

my $i = 0;
my @hosts = (0, 0);		# Do at least 2 local tests.
while( defined( my $val = $ENV{"STRESS_PREFIX$i"} )) {
  $hosts[$i++] = $val;
}

makepp \'builtin', '-MBuildCacheControl', 'create', $cache;

$i = 0;
# Fork a child for every host.
for( @hosts ) {
  mkdir "dir$i" or die;
  cp 'Makeppfile.in', "dir$i/Makeppfile";
  unless( fork ) {		# We're the child now
    my @cmd = ($ENV{PERL}, './stress_test.pl',
	       "dir$i", $iters, 0.5, $ENV{PERL}, $::makepp_path, $cache);
    if( $_ ) {			# Host prefix given for this one.
      chomp(my $pwd = `/bin/pwd`);
      my $cmd = "$_ \"sh -c 'cd $pwd && exec @cmd'\"";
      print "$cmd\n";
      exec $cmd;
    } else {
      exec @cmd;
    }
    die "exec failed: $!\n";
  }
  $i++;
}

# Back in the parent.
for(1..20*$minutes) {
  select undef, undef, undef, 2.5;
  makepp \'builtin', '-MBuildCacheControl', qw{clean --mtime +-1 --in-mtime +-1}, $cache;
}
print STDERR "clean done\n";

for( @hosts ) {
  wait; die if $?;
}

unlink 'answers/build_cache_stress' unless $insist || -f 'build_cache_stress';

1;
###	17	755	1103935704	1185560282	stress_test.pl
use Cwd 'chdir';

@ARGV==6 or die;
my ($subdir, $iters, $sleep, $perl, $makepp, $cache) = @ARGV;

chdir $subdir or die;
srand($$);
my $upcache = ($cache =~ m@^/@) ? $cache : "../$cache";

for(1..$iters) {
  unlink qw{short_file long_file};
  -e qw{short_file} || -e qw{long_file} and die;
  select(undef, undef, undef, rand($sleep));
  system $perl, $makepp, "--build_cache=$upcache", rand(2)>1 ? '--force-copy-from-bc' : () and die;
}
print STDERR "$subdir done\n";
exit 0;
###	19	644	1103936101	1185560328	Makeppfile.in
perl_begin
  $::build_cache_error_hook = sub {
    # If this file doesn't show up, then there hasn't been any stress, so the
    # test isn't doing its job (and thus it fails even if it reveals no bugs).
    open(my $fh, '>', '../build_cache_stress') or die "$!";
  };
  $block = "long lines file\n" x 1024;
perl_end

$(phony check): short_file long_file.wc
	diff short_file ../answers/dir1/short_file
	diff long_file.wc ../answers/dir1/long_file.wc

short_file long_file:
	&echo -o short_file "short file"
	-&expr -n 'print $$block for 1..64' -o long_file

long_file.$( wc junk): long_file : build_cache none
	&grep -c '/^long lines file$$/o' long_file -o$(output) -w$(output 2)
###	D	755	1164319650	1079870636	.makepp/
###	3	644	1164319650	1167411378	.makepp/log
This is a dummy file present so as to satisfy makepp's test harness.

N_FILES00
###	D	755	1103936101	1103936159	answers/
###	0	644	1103936084	1103936090	answers/build_cache_stress
###	D	755	1103936101	1103936159	answers/dir0
###	1	644	1103936084	1103936090	answers/dir0/short_file
short file
###	1	644	1103936084	1103936090	answers/dir0/long_file.wc
65536
###	0	644	1103936084	1185554009	answers/dir0/long_file.junk
###	D	755	1103936101	1103936159	answers/dir1
###	1	644	1103936084	1103936090	answers/dir1/short_file
short file
###	1	644	1103936084	1103936090	answers/dir1/long_file.wc
65536
###	0	644	1103936084	1185561366	answers/dir1/long_file.junk
