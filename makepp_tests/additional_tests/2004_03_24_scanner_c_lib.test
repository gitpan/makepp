###	SPAR <http://www.cpan.org/scripts/>
###	66	644	1160341077	1080322070	Makefile
#
# Test various things about the command parser:
# 1) Splitting command up into multiple lines;
# 2) Ignoring the echo with quoted string;
# 3) Handling -lxyz.
# 4) Whether a program is automatically recognized as an implicit dependency.
# 5) Whether register_input_suffix works
#
EXE_SUFFIX = ${perl ::is_windows() && '.exe'}

$(phony all):
	./xyz

CPP := $(findfile cpp)
ifneq($(CPP),cpp)
register_input_suffix $(CPP) .vpp
%.v: %.vpp
	$(CPP) $< > $@

all: b.v

c.v:
	&touch c.v

perl { $two_more = 1 }
endif

perl {{
  my $n_files = $two_more ? 7 : 5;
  open (my $fh, '>answers/n_files') or die;
  print $fh "$n_files 0\n";
}}

xyz$(EXE_SUFFIX):
	$(CC) main.o -L. -lxyz -o $(output)

%.o : %.c
	@echo Compiling $(input)
	echo dummy > /dev/null; $(CC) $(CFLAGS) -c $(input) -o $(output)
	echo ' ; gcc a.c ' > /dev/null # Tests ignoring semicolon in quotes

libxyz.a : xyz.o
    ifnsys Darwin
	$(AR) rs $(output) $(inputs)
    else
	$(AR) r $(output) $(inputs)
	ranlib $(output)
    endif

#
# This target should be made:
#
xyz.h:
	@&echo 'int xyz();' -o $(output)

#
# This target should not be made.
#
a.c :
	&touch $@

perl_begin
    $scanners{'foo'} = sub {};
    my $hashref = \%{'scanners'};
    die unless $hashref->{'foo'};
perl_end
###	1	644	1080322036	1080160284	b.vpp
#include "c.v"
###	7	644	1080322036	1080160284	main.c
#include "xyz.h"

int
main()
{
    return xyz();
}
###	4	644	1080322036	1080160259	xyz.c
int xyz()
{
    return 0;
}
###	D	755	1080322113	1080161189	answers/
