###	SPAR <http://www.cpan.org/scripts/>
###	2	644	1077141637	1077141631	Makeppfile
$(phony clean):
	&rm -f $(only_targets **/*)
###	D	755	1077216766	1077216761	answers
###	1	644	1077216767	1077216761	answers/z
19
###	1	644	1077216767	1077216761	answers/y
18
###	1	644	1077144030	1077144018	answers/x
18
###	D	755	1077216823	1077216823	foo
###	5	644	1077143366	1077143363	foo/M
$(phony nothing):
	@perl {}

x: foo
	./foo > $@
###	5	644	1077143391	1077143389	foo/f.c
#include <stdio.h>
int main() {
	printf("17\n");
	return 0;
}
###	D	755	1077216767	1077216766	foo/bar
###	67	644	1159479798	1077217437	makepp_test_script.pl
sub sed_17($) {
  open my $in, 'foo/f.c';
  open my $out, '>foo/foo.c';
  while( <$in> ) {
    s/17/$_[0]/;
    print $out $_;
  }
}

sub from_rep($) {
  open my $in, 'foo/bar/.makepp/foo.c.mk';
  /FROM_REPOSITORY/ and return while <$in>;

  open my $out, ">>$_[0]";
  print $out "Lost repository\n";
}

cp qw(foo/M foo/Makeppfile);
makepp qw(-R foo/bar=foo foo/bar/nothing);

unlink 'foo/Makeppfile';
makepp qw(-R foo/bar=foo);

cp qw(foo/M foo/Makeppfile);
cp qw(foo/f.c foo/foo.c);
makepp qw(-R foo/bar=foo foo/bar/x);

# Make sure that the foo.c timestamp changes
wait_timestamp 'foo.c';

sed_17 18;
makepp qw(-R foo/bar=foo foo/bar/x);

cp qw(foo/bar/x x);
from_rep 'x';

cp qw(foo/f.c foo/foo.c);
makepp 'foo/x';
makepp \'clean', '--only-repository-links', 'foo/bar';

# This should pick up x from foo/
makepp qw(-R foo/bar=foo foo/bar/x);

# Make sure that the foo.c timestamp changes
wait_timestamp 'foo.c';

sed_17 18;
makepp 'foo/x';
makepp \'clean', '--only-repository-links', 'foo/bar';

# This should pick up x from foo/
makepp qw(-R foo/bar=foo foo/bar/x);

cp qw(foo/bar/x y);
from_rep 'y';

# Make sure that the foo.c timestamp changes
wait_timestamp 'foo.c';

sed_17 19;
# Now it should recompile, but still remember that foo.c comes from a repos
makepp qw(-R foo/bar=foo foo/bar/x);

cp qw(foo/bar/x z);
from_rep 'z';

1;
