<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>makepp_signatures -- How makepp knows when files have changed</title>
<link rel="stylesheet" href="makepp.css" type="text/css" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:ActivePerl@ActiveState.com" />
</head>

<body>


<!-- INDEX BEGIN -->
<div name="index">
<p><a name="__index__"></a></p>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<ul>

		<li><a href="#mpp__signature_methods_included_in_the_distribution">Mpp::Signature methods included in the distribution</a></li>
		<li><a href="#extending_applicability">Extending applicability</a></li>
		<li><a href="#shortcomings">Shortcomings</a></li>
		<li><a href="#custom_methods">Custom methods</a></li>
	</ul>

</ul>

<hr name="index" />
</div>
<!-- INDEX END -->

<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>makepp_signatures -- How makepp knows when files have changed</p>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p><strong>C:</strong>&nbsp;<a href="././makeppreplay.html#c">C</a>,
  <a href="././makeppreplay.html#c">c_compilation_md5</a>,&nbsp;
<strong>M:</strong>&nbsp;<a href="#md5">md5</a>,&nbsp;
<strong>P:</strong>&nbsp;<a href="#plain">plain</a>,&nbsp;
<strong>S:</strong>&nbsp;<a href="#shared_object">shared_object</a>,&nbsp;
<strong>X:</strong>&nbsp;<a href="#xml">xml</a>,
  <a href="#xml">xml_space</a></p>
<p>Each file is associated with a <em>signature</em>, which is a string that changes if
the file has changed.  Makepp compares signatures to see whether it needs to
rebuild anything.  The default signature for files is a concatenation of the
file's modification time and its size, unless you're executing a C/C++
compilation command, in which case the default signature is a cryptographic
checksum on the file's contents, ignoring comments and whitespace.  If you
want, you can switch to a different method, or you can define your own
signature functions.</p>
<p>How the signature is actually used is controlled by the <em>build check method</em>
(see <a href="././makepp_build_check.html">makepp_build_check</a>).  Normally, if a file's
signature changes, the file itself is considered to have changed, and makepp
forces a rebuild.</p>
<p>If makepp is building a file, and you don't think it should be, you might want
to check the build log (see <a href="././makepplog.html">makepplog</a>).  Makepp writes an
explanation of what it thought each file depended on, and why it chose to
rebuild.</p>
<p>There are several signature methods included in makepp.  Makepp usually picks
the most appropriate standard one automatically.  However, you can change the
signature method for an individual rule by using
<a href="././makepp_rules.html#signature_signature_method"><code>:signature</code></a> modifier on the rule
which depends on the files you want to check, or for all rules in a makefile
by using the <a href="././makepp_statements.html#signature_name"><code>signature</code></a> statement, or
for all makefiles at once using the <a href="././makepp_command.html#m_method"><a href="././makeppclean.html#m"><code>-m</code></a> or <a href="././makepp_command.html#signature_method"><code>--signature-method</code></a></a> command line option.</p>
<p>
</p>
<h2><a name="mpp__signature_methods_included_in_the_distribution">Mpp::Signature methods included in the distribution</a></h2>
<dl>
<dt><strong><a name="plain" class="item">plain (actually nameless)</a></strong></dt>

<dd>
<p>The plain signature method is the file's modification time and the file's
size, concatenated.  These values are quickly obtainable from the operating
system and almost always change when the file changes.  For symlinks it uses
the values of the linkee.  If there is no linkee, i.e. it's a dangling
symlink, then it uses its own values, but prepends a <code>0</code> to mark the fact.</p>
<p>Makepp used to look only at the file's modification time, but if you run
makepp several times within a second (e.g., in a script that's building
several small things), sometimes modification times won't change.  Then,
hopefully the file's size will change.</p>
<p>If the case where you may run makepp several times a second is a problem
for you, you may find that using the <a href="#md5"><code>md5</code></a> method is somewhat more
reliable.  If makepp builds a file, it flushes its cached MD5 signatures
even if the file's date hasn't changed.</p>
<p>For efficiency's sake, makepp won't reread the file and recompute the complex
signatures below if this plain signature hasn't changed since the last time it
computed it.  This can theoretically cause a problem, since it's possible to
change the file's contents without changing its date and size.  In practice,
this is quite hard to do so it's not a serious danger.  In the future, as more
filesystems switch to timestamps of under a second, hopefully Perl will give us
access to this info, making this failsafe.</p>
</dd>
<dt><strong><a name="c" class="item">C</a></strong></dt>

<dt><strong><a name="c_compilation_md5" class="item">c_compilation_md5</a></strong></dt>

<dd>
<p>This is the method for input files to C like compilers.  It checks if a file's name looks
like C or C++ source code, including things like Corba IDL.  If it does, this
method applies.  If it doesn't, it falls back to plain signatures for binary
files (determined by name or else by content) and else to <a href="#md5">md5</a>.</p>
<p>The idea is to be independent of formatting changes.  This is done by pulling
everything up as far as possible, and by eliminating insignificant spaces.
Words are exempt from pulling up, since they might be macros containing
<code>__LINE__</code>, so they remain on the line where they were.</p>
<pre>
    // ignored comment
  
    #ifdef XYZ
        #include &lt;xyz.h&gt;
    #endif
  
    int a = 1;
  
    void f
    (
        int b
    )
    {
        a += b + ++c;
    }
  
        /* more ignored comment */</pre>
<p>is treated as though it were</p>
<pre>
    #ifdef XYZ
    #include&lt;xyz.h&gt;
    #endif
  
  
  
    int a=1;
  
    void f(
  
    int b){
  
  
    a+=b+ ++c;}</pre>
<p>That way you can reindent your code or add or change comments without
triggering a rebuild, so long as you don't change the line numbers.  (This
signature method recompiles if line numbers have changed because that causes
calls to <code>__LINE__</code> and most debugging information to change.)  It also
ignores whitespace and comments <strong>after</strong> the last token.  This is useful for
preventing a useless rebuild if your VC adds lines at a <code>$</code><code>Log$</code> tag when
checking in.</p>
<p>This method is particularly useful for the following situations:</p>
<ul>
<li>
<p>You want to make changes to the comments in a commonly included header
file, or you want to reformat or reindent part of it.  For one project
that I worked on a long time ago, we were very unwilling to correct
inaccurate comments in a common header file, even when they were
seriously misleading, because doing so would trigger several hours of
rebuilds.  With this signature method, this is no longer a problem.</p>
</li>
<li>
<p>You like to save your files often, and your editor (unlike emacs) will
happily write a new copy out even if nothing has changed.</p>
</li>
<li>
<p>You have C/C++ source files which are generated automatically by other
build commands (e.g., yacc or some other preprocessor).  For one system
I work with, we have a preprocessor which (like yacc) produces two
output files, a <code>.cxx</code> and a <a href="././makeppreplay.html#h"><code>.h</code></a> file:</p>
<pre>
    %.h %.cxx: %.qtdlg $(HLIB)/Qt/qt_dialog_generator
        $(HLIB)/Qt/qt_dialog_generator $(input)</pre>
<p>Every time the input file changed, the resulting <em class="file">.h</em> file also was
rewritten, and ordinarily this would trigger a rebuild of everything
that included it.  However, most of the time the contents of the <em class="file">.h</em>
file didn't actually change (except for a comment about the build time
written by the preprocessor), so a recompilation was not actually
necessary.</p>
</li>
</ul>
</dd>
<dt><strong><a name="md5" class="item">md5</a></strong></dt>

<dd>
<p>This is the default method, for files not recognized by the <a href="#c">C</a> method.
Computes an MD5 checksum of the file's contents, rather than looking at the
file's date or size.  This means that if you change the date on the file but
don't change its contents, makepp won't try to rebuild anything that depends
on it.</p>
<p>This is particularly useful if you have some file which is often
regenerated during the build process that other files depend on, but
which usually doesn't actually change.  If you use the <a href="#md5"><code>md5</code></a> signature
checking method, makepp will realize that the file's contents haven't
changed even if the file's date has changed.  (Of course, this won't
help if the files have a timestamp written inside of them, as archive
files do for example.)</p>
</dd>
<dt><strong><a name="shared_object" class="item">shared_object</a></strong></dt>

<dd>
<p>This method only works if you have the utility <code>nm</code> in your path, and it
accepts the <code>-P</code> option to output Posix format.  In that case only the names
and types of symbols in dynamically loaded libraries become part of their
signature.  The result is that you can change the coding of functions without
having to relink the programs that use them.</p>
<p>In the following command the parser will detect an implicit dependency on
<em class="file">$(LIBDIR)/libmylib.so</em>, and build it if necessary.  However the link command
will only be reperformed whenever the library exports a different set of
symbols:</p>
<pre>
    myprog: $(OBJECTS) :signature shared_object
        $(LD) -L$(LIBDIR) -lmylib $(inputs) -o $(output)</pre>
<p>This works as long as the functions' interfaces don't change.  But in that
case you'd change the declaration, so you'd also need to change the callers.</p>
<p>Note that this method only applies to files whose name looks like a shared
library.  For all other files it falls back to <a href="#c_compilation_md5"><code>c_compilation_md5</code></a>, which may
in turn fall back to others.</p>
</dd>
<dt><strong><a name="xml" class="item">xml</a></strong></dt>

<dt><strong><a name="xml_space" class="item">xml_space</a></strong></dt>

<dd>
<p>These are two similar methods which treat xml canonically and differ only in
their handling of whitespace.  The first completely ignores it around tags and
considers it like a single space elsewhere, making the signature immune to
formatting changes.  The second respects any whitespace in the xml, which is
necessary even if just a small part requires that, like a <code>&lt;pre&gt;</code> section
in an xhtml document.</p>
<p>Common to both methods is that they sign the essence of each xml document.
Presence or not of a BOM or <a href="#xml"><code>&lt;?xml?&gt;</code></a> header is ignored.  Comments are
ignored, as is whether text is protected as <code>CDATA</code> or with entities.  Order
and quoting style of attributes doesn't matter, nor does how you render empty
tags.</p>
<p>For any file which is not valid xml, or if the Expat based <code>XML::Parser</code> or
the <code>XML::LibXML</code> parser is not installed, this falls back to method md5.  If
you switch your Perl installation from one of the parsers to the others,
makepp will think the files are different as soon as their timestamp changes.
This is because the result of either parser is logically equivalent, but they
produce different signatures.  In the unlikely case that this is a problem,
you can force use of only <code>XML::LibXML</code> by setting in Perl:</p>
<pre>
    $Mpp::Signature::xml::libxml = 1;</pre>
</dd>
</dl>
<p>
</p>
<h2><a name="extending_applicability">Extending applicability</a></h2>
<p>The <a href="#c"><code>C</code></a> or <a href="#c_compilation_md5"><code>c_compilation_md5</code></a> method has a built in list of suffixes it
recognizes as being C or C-like.  If it gets applied to other files it falls
back to simpler signature methods.  But many file types are syntactically
close enough to C++ for this method to be useful.  Close enough means C++
comment and string syntax and whitespace is meaningless except one space
between words (and C++'s problem cases <code>- -</code>, <code>+ +</code>, <code>/ *</code> and <code>&lt; &lt;</code>).</p>
<p>It (and its subclasses) can now easily be extended to other suffixes.
Anyplace you can specify a signature you can now tack on one one of these
syntaxes to make the method accept additional filenames:</p>
<dl>
<dt><strong><a name="c_suffix1_suffix2_suffix3" class="item">C.<em>suffix1,suffix2,suffix3</em></a></strong></dt>

<dd>
<p>One or more comma-separated suffixes can be added to the method by a colon.
For example <code>C.ipp,tpp</code> means that besides the built in suffixes it will also
apply to files ending in <em class="file">.ipp</em> or <em class="file">.tpp</em>, which you might be using for the
inline and template part of C++ headers.</p>
</dd>
<dt><strong><a name="c_suffix_regexp" class="item">C.(<em>suffix-regexp</em>)</a></strong></dt>

<dd>
<p>This is like the previous, but instead of enumerating suffixes, you give a
Perl regular expression to match the ones you want.  The previous example
would be <code>C.(ipp|tpp)</code> or <code>C.([it]pp)</code> in this syntax.</p>
</dd>
<dt><strong>C(<em>regexp</em>)</strong></dt>

<dd>
<p>Without a dot the Perl regular expression can match anywhere in the file name.
If it includes a slash, it will be tried against the fully qualified filename,
otherwise only against the last part, without any directory.  So if you have
C++ style suffixless headers in a directory <em class="file">include</em>, use <a href="#c"><code>C(include/)</code></a> as
your signature method.  However the above suffix example would be quite nasty
this way, <a href="#c"><code>C(\.(?:ipp|tpp)$$)</code></a> or <a href="#c"><code>C(\.[it]pp$$)</code></a> because <code>$</code> is the
expansion character in makefiles.</p>
</dd>
</dl>
<p>
</p>
<h2><a name="shortcomings">Shortcomings</a></h2>
<p>Signature methods apply to all files of a rule.  Now if you have a compiler
that takes a C like source code and an XML configuration file you'd either
need a combined signature method that smartly handles both file types, or you
must choose an existing method which will not know whether a change in the
other file is significant.</p>
<p>In the future signature method configuration may be changed to
filename-pattern, optionally per command.</p>
<p>
</p>
<h2><a name="custom_methods">Custom methods</a></h2>
<p>You can, if you want, define your own methods for calculating file
signatures and comparing them.  You will need to write a Perl module to
do this.  Have a look at the comments in <code>Mpp/Signature.pm</code> in the
distribution, and also at the existing signature algorithms in
<code>Mpp/Signature/*.pm</code> for details.</p>
<p>Here are some cases where you might want a custom signature method:</p>
<ul>
<li>
<p>When you want all changes in a file to be ignored.  Say you always want
<em class="file">dateStamp.o</em> to be a dependency (to force a rebuild), but you don't
want to rebuild if only <em class="file">dateStamp.o</em> has changed.  You could define a
signature method that inherits from <a href="#c_compilation_md5"><code>c_compilation_md5</code></a> that recognizes
the <em class="file">dateStamp.o</em> file by its name, and always returns a constant value
for that file.</p>
</li>
<li>
<p>When you want to ignore part of a file.  Suppose that you have a program
that generates a file that has a date stamp in it, but you don't want to
recompile if only the date stamp has changed.  Just define a signature
method similar to <a href="#c_compilation_md5"><code>c_compilation_md5</code></a> that understands your file format
and skips the parts you don't want to take into account.</p>
</li>
</ul>

</body>

</html>
