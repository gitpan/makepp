<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>makepp -- Compatible but improved replacement for make</title>
<link rel="stylesheet" href="makepp.css" type="text/css" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:pfeiffer@trobador.(none)" />
</head>

<body>


<!-- INDEX BEGIN -->
<div name="index">
<p><a name="__index__"></a></p>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<ul>

		<li><a href="#features">Features</a></li>
	</ul>

</ul>

<hr name="index" />
</div>
<!-- INDEX END -->

<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>makepp -- Compatible but improved replacement for make</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<p><strong>makepp</strong> [&nbsp;-e&nbsp;] [&nbsp;-C&nbsp;<em>dir</em>&nbsp;] [&nbsp;-f&nbsp;<em>makefile</em>] [&nbsp;-F&nbsp;<em>makefile_or_dir</em>&nbsp;]
    [&nbsp;-j&nbsp;<em>n</em>] [&nbsp;-k&nbsp;] [&nbsp;-m&nbsp;<em>method</em>&nbsp;] [&nbsp;--noremake-makefiles&nbsp;]
    [&nbsp;--nowarn&nbsp;] [&nbsp;-q&nbsp;] [&nbsp;-R&nbsp;<em>dir</em>] [&nbsp;--traditional-recursive-make&nbsp;]
    [&nbsp;-v&nbsp;] [&nbsp;--version&nbsp;] [&nbsp;<em>VAR=value</em>&nbsp;...&nbsp;] [&nbsp;<em>target</em>&nbsp;...&nbsp;]</p>
<p><strong>mpp</strong> [-options] [&nbsp;<em>VAR=value</em>&nbsp;...&nbsp;] [&nbsp;<em>target</em>&nbsp;...&nbsp;]</p>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>Makepp, a build program which has a number of features that allow for reliable
builds and simpler build files, is a drop-in replacement for GNU make. It
supports <a href="././makepp_incompatibilities.html">almost all</a> of the syntax that GNU make
supports, and can be used with makefiles produced by utilities such as
automake. It is called makepp (or make++) because it was designed with special
support for C++, which has since been extended to other languages like Swig or
embedded SQL. Also its relationship to make is analogous to C++'s relationship
to C: it is almost 100% backward compatible but adds a number of new features
and much better ways to write makefiles.</p>
<p>Makepp passes an extensive test-suite, and is used in several big projects.
If you have any issues with the latest CVS version, holler, and we'll try to
fix it quickly.</p>
<p>Makepp runs with any version of perl since 5.6.  I have seen it occasionally
trip over a nasty bug in perl 5.6.0 on linux which causes makepp to spit out
all kinds of strange error messages, so I don't recommend running with perl
5.6.0; however, this is apparently rare so if you have 5.6.0 you might well be
ok.</p>
<p>The following manual pages contain further information on how to use
makepp:</p>
<dl>
<dt><strong><a name="tutorial_makepp_tutorial" class="item"><a href="././makepp_tutorial.html">Tutorial</a></a></strong></dt>

<dd>
<p>How to write a makefile.  This is mostly intended for someone with little or
no experience using any implementation of make.</p>
</dd>
<dt><strong><a name="compilation_tutorial_makepp_tutorial_compilation" class="item"><a href="././makepp_tutorial_compilation.html">Compilation Tutorial</a></a></strong></dt>

<dd>
<p>What the Unix compilation commands do.</p>
</dd>
<dt><strong><a name="release_notes_makepp_release_notes" class="item"><a href="././makepp_release_notes.html">Release Notes</a></a></strong></dt>

<dd>
<p>What changed with each release.</p>
</dd>
<dt><strong><a name="speedup_makepp_speedup" class="item"><a href="././makepp_speedup.html">Speedup</a></a></strong></dt>

<dd>
<p>Various tips for making makepp go much faster.</p>
</dd>
<dt><strong><a name="perl_performance_perl_performance" class="item"><a href="././perl_performance.html">Perl Performance</a></a></strong></dt>

<dd>
<p>Various tips for making perl (within your makefiles and elsewhere) go faster.</p>
</dd>
</dl>
<hr/><dl>
<dt><strong><a name="cookbook_makepp_cookbook" class="item"><a href="././makepp_cookbook.html">Cookbook</a></a></strong></dt>

<dd>
<p>Quick answers to &quot;How do I ...?&quot; or &quot;What's the best way to ...?&quot;</p>
</dd>
<dt><strong><a name="faq_makepp_faq" class="item"><a href="././makepp_faq.html">FAQ</a></a></strong></dt>

<dd>
<p>Quick answers to questions people have stumbled upon.</p>
</dd>
</dl>
<hr/><dl>
<dt><strong><a name="build_algorithm_makepp_build_algorithm" class="item"><a href="././makepp_build_algorithm.html">Build Algorithm</a></a></strong></dt>

<dd>
<p>How makepp's build algorithm differs in fundamental ways from traditional make.</p>
</dd>
<dt><strong><a name="build_cache_makepp_build_cache" class="item"><a href="././makepp_build_cache.html">Build Cache</a></a></strong></dt>

<dd>
<p>A build cache is a directory that stores the results of prior builds in
case they are needed again in the same directory, or in a separate build
in a different directory.</p>
</dd>
<dt><strong><a name="build_check_methods_makepp_build_check" class="item"><a href="././makepp_build_check.html">Build Check Methods</a></a></strong></dt>

<dd>
<p>How makepp decides when to build.</p>
</dd>
<dt><strong><a name="builtin_commands_makepp_builtins" class="item"><a href="././makepp_builtins.html">Builtin Commands</a></a></strong></dt>

<dd>
<p>Powerful, efficient commands available everwhere makepp 2.0 or newer is.</p>
</dd>
<dt><strong><a name="builtin_rules_makepp_builtin" class="item"><a href="././makepp_builtin.html">Builtin Rules</a></a></strong></dt>

<dd>
<p>For very simple programs, you may not need a makefile at all!  These are the
builtin rules that makepp knows about.</p>
</dd>
<dt><strong><a name="compatibility_makepp_compatibility" class="item"><a href="././makepp_compatibility.html">Compatibility</a></a></strong></dt>

<dd>
<p>Where and and with what version of Perl makepp works.</p>
</dd>
<dt><strong><a name="extending_makepp_extending" class="item"><a href="././makepp_extending.html">Extending</a></a></strong></dt>

<dd>
<p>How you can add functions to makepp by writing your own perl code.</p>
</dd>
<dt><strong><a name="functions_makepp_functions" class="item"><a href="././makepp_functions.html">Functions</a></a></strong></dt>

<dd>
<p>Functions for text manipulation and various other purposes.</p>
</dd>
<dt><strong><a name="incompatibilities_makepp_incompatibilities" class="item"><a href="././makepp_incompatibilities.html">Incompatibilities</a></a></strong></dt>

<dd>
<p>What works differently between GNU make and makepp.</p>
</dd>
<dt><strong><a name="repositories_makepp_repositories" class="item"><a href="././makepp_repositories.html">Repositories</a></a></strong></dt>

<dd>
<p>Repositories are a technique that simplifies both variant builds and keeping a
central set of sources.</p>
</dd>
<dt><strong><a name="rules_makepp_rules" class="item"><a href="././makepp_rules.html">Rules</a></a></strong></dt>

<dd>
<p>Specifying rules to build files.</p>
</dd>
<dt><strong><a name="sandboxes_makepp_sandboxes" class="item"><a href="././makepp_sandboxes.html">Sandboxes</a></a></strong></dt>

<dd>
<p>Using sandboxes to partition the build.</p>
</dd>
<dt><strong><a name="scanning_makepp_scanning" class="item"><a href="././makepp_scanning.html">Scanning</a></a></strong></dt>

<dd>
<p>How makepp scans for dependencies like include files.</p>
</dd>
<dt><strong><a name="signatures_makepp_signatures" class="item"><a href="././makepp_signatures.html">Signatures</a></a></strong></dt>

<dd>
<p>How makepp decides when files have changed.</p>
</dd>
<dt><strong><a name="statements_makepp_statements" class="item"><a href="././makepp_statements.html">Statements</a></a></strong></dt>

<dd>
<p>Additional directives to control makepp.</p>
</dd>
<dt><strong><a name="variables_makepp_variables" class="item"><a href="././makepp_variables.html">Variables</a></a></strong></dt>

<dd>
<p>Using variables to simplify rules.</p>
</dd>
</dl>
<hr/><dl>
<dt><strong><a name="makepp_mpp_makepp_command" class="item"><a href="././makepp_command.html">makepp, mpp</a></a></strong></dt>

<dd>
<p>Command line syntax of the main utility.</p>
</dd>
<dt><strong><a name="makeppclean_mppc_makeppclean" class="item"><a href="././makeppclean.html">makeppclean, mppc</a></a></strong></dt>

<dd>
<p>An efficient stand-alone cleanup script to remove files generated by makepp.</p>
</dd>
<dt><strong><a name="makeppgraph_mppg_makeppgraph" class="item"><a href="././makeppgraph.html">makeppgraph, mppg</a></a></strong></dt>

<dd>
<p>A stand-alone utility to graphically analyze dependencies and the reasons for a rebuild.</p>
</dd>
<dt><strong><a name="makeppinfo_mppi_makeppinfo" class="item"><a href="././makeppinfo.html">makeppinfo, mppi</a></a></strong></dt>

<dd>
<p>A stand-alone utility to readably dump the build info makepp remembers about each file.</p>
</dd>
<dt><strong><a name="makepplog_mppl_makepplog" class="item"><a href="././makepplog.html">makepplog, mppl</a></a></strong></dt>

<dd>
<p>A stand-alone utility to analyze dependencies and the reasons for a rebuild.</p>
</dd>
<dt><strong><a name="makeppreplay_mppr_makeppreplay" class="item"><a href="././makeppreplay.html">makeppreplay, mppr</a></a></strong></dt>

<dd>
<p>A stand-alone utility to repeat things makepp has done, but much faster.</p>
</dd>
</dl>
<hr/><dl>
<dt><strong><a name="index_makepp_index" class="item"><a href="././makepp_index.html">Index</a></a></strong></dt>

<dd>
<p>All keywords, functions and operators in makepp.</p>
</dd>
</dl>
<p>
</p>
<h2><a name="features">Features</a></h2>
<dl>
<dt><strong><a name="automatic_scanning_for_include_files" class="item">Automatic scanning for include files</a></strong></dt>

<dd>
<p>Makepp scans automatically for include files.  This obviates the need for
tools like makedepend.  Makepp's scanner works even if the included files
don't exist yet but have to be built.  (This is true no matter where on the
include path they come from, unlike programs that depend on gcc's
<code>-MM&nbsp;-MG</code> option.)  Makepp has a flexible system for doing this which is
based on scanning the build command; you can adapt it for other languages or
build commands by writing a perl subroutine.</p>
</dd>
<dt><strong><a name="better_system_for_hierarchical_builds" class="item">Better system for hierarchical builds</a></strong></dt>

<dd>
<p>Makepp has a better system for handling builds involving multiple
directories and multiple makefiles.  The traditional technique is to
have make invoke itself recursively in each directory.  Depending on how
complicated the interdependencies are, several recursive passes are
sometimes needed.  This makes the makefiles very complicated if they
guarantee a correct build.  The real problem is that unless dependencies
are trivial (e.g., just one library file), it is almost impossible to
express accurately dependencies of targets in one makefile in terms of
targets from the other makefile.  Unix make isn't smart enough to
realize that a target in one makefile depends on a file that is a target
in a lower-level makefile; it can't take build commands from the
lower-level makefile while it is trying to build the target in the
upper-level makefile.  So the usual solution is to build everything that
can be built with the lower-level makefiles, hoping that that's adequate
to build everything that's needed for the upper-level makefile.</p>
<p>Makepp loads all the needed makefiles in at once, so it has no problem dealing
with situations where a file from one makefile depends on a file produced by a
different makefile.  Makepp cd's automatically to the directory containing the
makefile before executing a command from a makefile, so each makefile may be
written independently without knowledge of the top-level build directory.  But
if access to the root of your build tree is important (e.g. because that's
where your include directory resides), you can name the makefile in that
directory specially.  Then makepp gives you the path to that directory in a
variable.</p>
<p>Makepp also can figure out where all the makefiles for the entire
project are without being told, if each makefile is in the same
directory as the files it is supposed to produce.  This can also
simplify makefiles a great deal.</p>
<p>For more details on building with multiple directories, see
<a href="././makepp_cookbook.html#tips_for_multiple_directories">Tips for multiple directories in the makepp_cookbook manpage</a>.</p>
</dd>
<dt><strong><a name="reliable_wildcards" class="item">Reliable wildcards</a></strong></dt>

<dd>
<p>Makefiles can use wildcards reliably, because wild cards match either files
that exist, <em>or</em> files that do not yet exist but makepp knows how to build.
So even for a program with dozens of modules, your entire makefile could
simply read something like this:</p>
<pre>
    CXX = g++
    CXXFLAGS = -g
 
    %.o : %.c
        $(CXX) $(CXXFLAGS) -c $(input) -o $(output)
 
    my_program: *.o
        $(CXX) $(inputs) -o $(output)</pre>
<p>and this will work even if none of the <code>.o</code> files have been built yet.</p>
</dd>
<dt><strong><a name="reliable_builds_remembers_build_command" class="item">Reliable builds: remembers build command</a></strong></dt>

<dd>
<p>Makepp keeps track of the build commands, so that if compilation options
change, files are automatically rebuilt.  This is important to guarantee
correct builds.  (This idea was taken from Bob Sidebothem's &quot;cons&quot; utility,
which was described in the Perl Journal in 1998 and is available from CPAN.)</p>
<p>To illustrate why this is important, consider the following structure
definition:</p>
<pre>
    class ABC {
      int x;
    #ifndef SPECIAL_OPTION
      int y;
    #endif
      int z;
    };</pre>
<p>Now suppose you decide to turn on the <code>SPECIAL_OPTION</code> option by adding
<code>-DSPECIAL_OPTION</code> to the command line.  A recompilation of everything
is needed, but a traditional unix make will not detect this, and will
only recompile source files which have actually changed.  As a result,
some of your modules will be compiled with -DSPECIAL_OPTION, and others
won't.  After a very frustrating debugging session, you will discover
that all that needs to be done is to rebuild everything.  Then you will
curse make and hopefully switch to an improved implementation of it,
like makepp.  At least, that's what I did.</p>
<p>As another example, suppose that you are working on a project which is
pretty well debugged, so it's usually compiled with <code>-O2</code>.  Now you run
into a bug which you need to look at in the debugger.  Code compiled
with optimization is difficult to examine in the debugger, so you want
to recompile your code so that you can look at it.  If your makefile is
set up to store the compiler options in the usual variables, you can
just do this:</p>
<pre>
    makepp CFLAGS=-g CXXFLAGS=-g</pre>
<p>and makepp will know that the command line has changed for all the
modules.  Then when you've found your bug, just type</p>
<pre>
    makepp</pre>
<p>and it will be recompiled with optimization.  You don't need to type
<code>make clean</code> when you change build options.</p>
<p>Some makefiles (e.g., those for the linux kernel) go to incredible
lengths to force recompilation when the compile command changes.  With
makepp, it's taken care of automatically--you don't have to do anything.</p>
</dd>
<dt><strong><a name="reliable_builds_exact_matching_of_signature" class="item">Reliable builds: exact matching of signature</a></strong></dt>

<dd>
<p>By default, makepp doesn't merely ensure that all targets are newer than
all dependencies; if you replace a dependency with an older file, makepp
knows that it has to rebuild the target, simply because the input file
has changed.  This is another important feature to guarantee correct
builds which was taken from the &quot;cons&quot; utility.</p>
</dd>
<dt><strong><a name="smart_signature_calculations" class="item">Smart signature calculations</a></strong></dt>

<dd>
<p>Some modifications to source files do not actually require a rebuild.
For example, if you just change a comment line, or if you reindent some
code, there is no particular reason to force a compilation.  For C/C++
compilation, makepp determines whether a file needs recompilation by
computing a cryptographic checksum of the file's contents, ignoring
comments and whitespace, instead of looking at the file time.</p>
<p>This is particularly useful if you have include files that are generated
by files that change, and yet the generated include files themselves
seldom change.  Suppose you have a complicated yacc grammar in your
program, with a build rule like this:</p>
<pre>
    y.tab.c y.tab.h: parser.y
        yacc -d parser.y</pre>
<p>Ordinarily, every time you make even a tiny change to <code>parser.y</code>, every
file that depends on <code>y.tab.h</code> must be rebuilt since the file time of
<code>y.tab.h</code> has changed.  However, most changes to <code>parser.y</code> won't
actually change the contents of <code>y.tab.h</code> (except possibly a comment),
so all that recompilation is unnecessary.</p>
</dd>
<dt><strong><a name="repositories" class="item">Repositories</a></strong></dt>

<dd>
<p>Makepp can automatically incorporate files from a different directory
tree (the &quot;repository&quot;) into the current build tree as needed.  (This
idea was also taken from the &quot;cons&quot; program.)  This has several
interesting uses:</p>
<dl>
<dt><strong><a name="variant_builds" class="item">Variant builds</a></strong></dt>

<dd>
<p>Suppose you have been compiling your program with optimization on and
debugging off.  Now a bug crops up and you have to recompile everything
with debugging enabled.  Once you find the bug, however, you're going to
turn debugging off and optimization back on, and with most make programs
you would have to recompile all the sources again, even the ones that
did not change.  The procedure would look like this:</p>
<pre>
    % makepp CFLAGS=-O2                 # Compile everything.
    # oops, bug discovered here
    % makepp CFLAGS=-g                  # Recompiles everything again.
    gdb my_program
    # ... find the bug
    % makepp CFLAGS=-O2                 # Recompiles everything a third time.</pre>
<p>With makepp, you can simply cd to an empty directory, and specify your
original directory as a repository.  This will create new object files
in the empty directory, while leaving your old object files intact.  Now
you can find the bug in the directory compiled with debug, fix it in
your original sources, and then go back to your original directory.  Now
only the few files that you changed actually need to be recompiled.</p>
<p>The entire procedure would look like this:</p>
<pre>
    % makepp CFLAGS=-O2                 # Compile everything.
    # oops, bug discovered here
    % mkdir debugging
    % cd debugging
    % makepp -R .. CFLAGS=-g            # Compile with debugging enabled, but
                                        # put objects in debugging subdir.
    % gdb my_program
    # ... find the bug
    % cd ..                             # Back to original directory.
    % makepp CFLAGS=-O2                 # Recompiles only those files
                                        # that you changed.</pre>
<p>This can be a tremendous savings in time if there are many
modules.</p>
</dd>
<dt><strong><a name="development_team_with_common_sources" class="item">Development team with common sources</a></strong></dt>

<dd>
<p>Suppose you have a team of developers working on a standard set of
sources.  Each developer is making independent changes, but doesn't need
to have a copy of the whole source tree.  Using makepp's repositories,
you can have each developer have copies only of the files he has
changed.  Makepp will automatically and temporarily create symbolic
links for the other files that have not been changed to the
corresponding files in the repository.  It can even do this for object
files which exist in the repository and do not need to be recompiled in
the developer's individual directory.</p>
</dd>
<dt><strong><a name="guarantee_correct_rules" class="item">Guarantee correct rules</a></strong></dt>

<dd>
<p>If your rules do somthing which you didn't tell makepp about, the repository
mechanism will not know to fetch those things.  So something that builds
normally but fails from a repository tells you to fix your rules.</p>
</dd>
</dl>
</dd>
<dt><strong><a name="automatic_inference_of_needed_o_files" class="item">Automatic inference of needed <code>.o</code> files</a></strong></dt>

<dd>
<p>Makepp can often infer exactly which objects are actually necessary
without being explicitly told.  If you use this feature, then if one of
your source file includes <code>xx.h</code>, and there is a file called <code>xx.o</code>
that makepp knows how to make, then makepp adds <code>xx.o</code> to the link
command line.  I don't use non-shared libraries now in many places where
I used to, because makepp can automatically pick out the modules I need.</p>
</dd>
<dt><strong><a name="correct_handling_of_aliases_for_directories" class="item">Correct handling of aliases for directories</a></strong></dt>

<dd>
<p>Makepp won't be confused by soft links to a directory or by different
relative filenames that refer to the same file.  All directory paths to
a file are recognized, including <em class="file">foo</em>, <em class="file">./foo</em>, <em class="file">../src/foo</em>,
<em class="file">/auto_mnt/somedisk/bob/src/foo</em>, and <em class="file">/users/bob/src/foo</em>.</p>
</dd>
<dt><strong><a name="filenames_with_special_characters" class="item">Filenames with special characters</a></strong></dt>

<dd>
<p>Makepp can support filenames with colons or spaces or other special
characters that cause trouble for the traditional make.  Just surround
the filename with quotes.  (See <a href="././makepp_rules.html#special_characters">Special characters in the makepp_rules manpage</a> for
details.)</p>
</dd>
<dt><strong><a name="extensible_textual_substutition_functions" class="item">Extensible textual substutition functions</a></strong></dt>

<dd>
<p>Makepp can use arbitrary perl subroutines for textual substitution in
the makefile.  If you know perl, you are not constrained at all by the
set of makepp's builtin textual manipulation functions.</p>
<p>You can also simply write perl code in your makefile.  You can manipulate Make
variables with the full power of the entire perl language.  See
<a href="././makepp_variables.html">the makepp_variables manpage</a> for details.</p>
</dd>
<dt><strong><a name="logging_of_build_decisions" class="item">Logging of build decisions</a></strong></dt>

<dd>
<p>By default, makepp makes a log-file viewable with <a href="././makepplog.html">makepplog, mppl</a>
that contains a description of every file that it tried to build, what rule
was used to build it, what it depended on, and (if the file was rebuilt) why.
This can be extremely useful for debugging a makefile--if you're wondering why
makepp decided to rebuild a file, or why it didn't, you can just look in the
log file where it explains the decisions.</p>
</dd>
<dt><strong><a name="improved_support_for_parallel_builds" class="item">Improved support for parallel builds</a></strong></dt>

<dd>
<p>Makepp supports parallel compilations, but (unlike other make
implementations) it won't mix output from separate processes which are
running simultaneously.</p>
</dd>
<dt><strong><a name="synonyms_for_cryptic_variables" class="item">Synonyms for cryptic variables</a></strong></dt>

<dd>
<p>Makepp supports easier-to-remember synonyms for the cryptic make
variables <a href="././makepp_variables.html#__"><code>$@</code></a>, <a href="././makepp_variables.html#__"><code>$^</code></a>, and <a href="././makepp_variables.html#__"><code>$&lt;</code></a>.  See <a href="././makepp_variables.html">the makepp_variables manpage</a> for
details.</p>
</dd>
</dl>

</body>

</html>
